<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Funkcjonalność:
 1. Bezpośrednie wyszukanie filmu/serialu po podanej nazwie (prosta, zewnętrzna wyszukiwarka).
 2. Wyszukiwanie po nazwie pliku wskazanego w menu Otwórz:
     - w tym momencie zostaje wykonane proste filtrowanie nazwy w celu wyłuskania tytułu filmu/serialu.
     - następnie otwarte zostaje okno proszące o zweryfikowanie tytułu (czasem proste filtrowanie nie jest wystarczające)
        a) jeśli tytuł jest poprawny wybieramy "Nie" i przechodzimy do portalu FilmWeb
        b) jeśli tytuł jest "zaśmiecony", wybieramy "Tak" by uruchomić filtr zaawansowany
     - zostaje otwarte ostatnie już okno ukazujące tytuł filmu, jeśli jest poprawna klikamy "Zatwierdź"
        jeśli nie, jesteśmy zmuszeni do poprawienia tytułu ręcznie.
  3. Otwarcie pliku przez program (prawy przycisk myszy &gt; Otwórz za pomocą... &gt; FilmWeb Movie Checker) 
      lub poprzez opcję "Sprawdź na FilmWeb" w menu kontekstowym pliku (opcja dostępna po jej uaktywnieniu: 
      Narzędzia -&gt; Menu kontekstowe -&gt; Dodaj
      - funkcjonalność identyczna jak w podpunkcie 2.
  4. Katalogowanie plików - Pobiera podstawowe informacje o filmie oraz jego opis, a następnie tworzy nowy folder o nazwie:
       &lt;ocena&gt; - &lt;tytuł&gt;{gatunek}[rok][wersja]
       Folder tworzony jest w katalogu z plikami wideo (określonym przez użytkownika - domyślnie C:\).
       Po utworzeniu folderu, program do niego przenosi film (wraz z napisami, o ile takowe istnieją i posiadaja identyczną nazwę co film)
       i umieszcza w nim opis filmu.

      
     UWAGA!!! 
     Opcja druga działa bez zarzutu ze scenowymi nazwami plików ( http://en.wikipedia.org/wiki/Standard_%28warez%29#Naming )
     lub ich modyfikacjami. Niestety "kreatywność" w nazewnictwie czasem przekracza wszelkie granice i trudno cokolwiek zdziałać.

Narzędzia:
1. "Ścieżka z plikami wideo" - określenie ścieżki do katalogu z plikami wideo (w celu przyśpieszenia ich wyszukiwania z poziomu programu)
2.  "Menu kontekstowe" - dodanie lub usunięcie opcji "Sprawdź na FilmWeb" z menu kontekstowego plików wideo.
3.  "Opis" - funkcja pozwalająca pobranie opisu do wskazanego filmu. Opis zastaje pobrany do katalogu, w którym znajdował się wskazany plik wideo.</value>
  </data>
</root>